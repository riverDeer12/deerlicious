// <auto-generated />
using System;
using Deerlicious.API.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Deerlicious.API.Database.Migrations
{
    [DbContext(typeof(DeerliciousContext))]
    [Migration("20250102133525_AddedPolicies")]
    partial class AddedPolicies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Deerlicious.API.Database.Entities.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Administrators");

                    b.HasData(
                        new
                        {
                            Id = new Guid("484b71ff-af37-4903-a1f0-128b09cee719"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(5960), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            FirstName = "Super",
                            IsDeleted = false,
                            LastName = "Admin",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(5970), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            UserId = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        });
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.Contributor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84ae252a-e3e2-47b8-8e0f-c82c0b03efff"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6090), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanGetUsers",
                            IsDeleted = false,
                            Name = "CanGetUsers",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6090), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("091809b0-1494-4f26-815c-2cd3e5bd74bb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6100), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanCreateUser",
                            IsDeleted = false,
                            Name = "CanCreateUser",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6100), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("5098d94b-587e-4b2f-94d6-5b6ae75e502b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6100), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanUpdateUser",
                            IsDeleted = false,
                            Name = "CanUpdateUser",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6100), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("8f2f1fce-fa11-481f-a53b-293d3213ac75"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6110), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanDeleteUser",
                            IsDeleted = false,
                            Name = "CanDeleteUser",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6110), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("84a7c3dc-7850-436f-85ae-78e164d6fbec"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6110), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanGetRoles",
                            IsDeleted = false,
                            Name = "CanGetRoles",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6120), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("975eed73-1e07-4361-87aa-1fc169e4cbcb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6120), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanCreateRole",
                            IsDeleted = false,
                            Name = "CanCreateRole",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6120), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("ac87e392-d90f-41c5-afa8-7edbd69a2526"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6130), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanUpdateRole",
                            IsDeleted = false,
                            Name = "CanUpdateRole",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6130), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("cc635c8e-c4de-4f1d-9b42-6d4aa63de053"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6150), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanDeleteRole",
                            IsDeleted = false,
                            Name = "CanDeleteRole",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6150), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("44e397c6-5c1a-4d01-83e1-38a929ea37c4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6150), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanGetAdministrators",
                            IsDeleted = false,
                            Name = "CanGetAdministrators",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6150), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("f21d67a2-df14-42e4-8c26-5bab4f2bb4d4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6160), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanCreateAdministrator",
                            IsDeleted = false,
                            Name = "CanCreateAdministrator",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6160), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("97565198-0010-4eb8-80d2-24cc5701e175"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6160), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanUpdateAdministrator",
                            IsDeleted = false,
                            Name = "CanUpdateAdministrator",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6170), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("095443ce-ff96-49f2-89c5-3e0c1d1f8343"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6170), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanDeleteAdministrator",
                            IsDeleted = false,
                            Name = "CanDeleteAdministrator",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6170), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("4b2fafd2-01ab-4624-b065-aa830014e51c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6170), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanGetContributors",
                            IsDeleted = false,
                            Name = "CanGetContributors",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6180), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("fd45c66c-0717-491a-948a-6dd3eb8bf80f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6180), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanCreateContributor",
                            IsDeleted = false,
                            Name = "CanCreateContributor",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6180), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("9f491c94-02e9-498a-84f9-d8fd9e57d1a4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6190), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanUpdateContributor",
                            IsDeleted = false,
                            Name = "CanUpdateContributor",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6190), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        },
                        new
                        {
                            Id = new Guid("d7ae701e-2e6d-4d13-a16d-090aada1df8e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6190), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "CanDeleteContributor",
                            IsDeleted = false,
                            Name = "CanDeleteContributor",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(6190), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        });
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69a4116d-b1bd-4f0b-b6a7-a13bb5eb639f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(5910), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Description = "Role with all access.",
                            IsDeleted = false,
                            Name = "SuperAdmin",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(5910), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb")
                        });
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.RolePolicy", b =>
                {
                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PolicyId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePolicies");
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(5530), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            Email = "superadmin@mail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            Password = "685D8127992F8280BB94EC3CF3F2B4DA35904A8AE09AC07AF245D1888A620FAF97DE8084F4141D5F2107BEB09FC7F57073EAE8746A000A0DFFD507C79ED055A3",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 2, 14, 35, 25, 498, DateTimeKind.Unspecified).AddTicks(5550), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            UserName = "superadmin"
                        });
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5604e898-cd94-476b-8b86-9aa3a87cc9bb"),
                            RoleId = new Guid("69a4116d-b1bd-4f0b-b6a7-a13bb5eb639f")
                        });
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.Administrator", b =>
                {
                    b.HasOne("Deerlicious.API.Database.Entities.User", "User")
                        .WithOne("Administrator")
                        .HasForeignKey("Deerlicious.API.Database.Entities.Administrator", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.Contributor", b =>
                {
                    b.HasOne("Deerlicious.API.Database.Entities.User", "User")
                        .WithOne("Contributor")
                        .HasForeignKey("Deerlicious.API.Database.Entities.Contributor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.RolePolicy", b =>
                {
                    b.HasOne("Deerlicious.API.Database.Entities.Policy", "Policy")
                        .WithMany("Roles")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deerlicious.API.Database.Entities.Role", "Role")
                        .WithMany("Policies")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.UserRole", b =>
                {
                    b.HasOne("Deerlicious.API.Database.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deerlicious.API.Database.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.Policy", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.Role", b =>
                {
                    b.Navigation("Policies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Deerlicious.API.Database.Entities.User", b =>
                {
                    b.Navigation("Administrator")
                        .IsRequired();

                    b.Navigation("Contributor")
                        .IsRequired();

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
